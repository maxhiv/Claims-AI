What the AI Smart Assistant Handles for the Field Adjuster • Suggesting appointment times and routes. • Sending confirmations/reminders/cancellation notices automatically. • Translating reminders if needed (multilingual outreach). • Syncing communications and notes into the claim file. • Keeping a running communication log without re-typing everything. • Tracking performance metrics (confirm rates, no-shows, drive time saved). ________________________________________ So the adjuster doesn’t have to chase calls or emails anymore. Their job becomes: • Confirm or adjust the AI’s schedule. • Tap pre-filled templates for outreach. • Drive, inspect, document, and update claim stage. Everything else—reminders, reschedules, communication logs, syncing—happens in the background. Impact Summary • +25–35% more inspections/day (less wasted time) • Fewer no-shows thanks to automated reminders/ETAs • Clean, consistent communication logs synced automatically • Lower stress → adjusters focus on adjusting, not admin ________________________________________ Bottom line: AI could evolve into a virtual field coordinator—handling the tedious back-and-forth, syncing with claim files, and letting adjusters focus on what they do best: scoping and adjusting. ________________________________________ 🔑 Ways AI Can Help Field Adjusters with Appointment Coordination 1. Smart Scheduling Assistants • AI bots (integrated with Outlook, Teams, or Google Calendar) can automatically reach out to policyholders with available time slots, confirm appointments, and send calendar invites. • They can manage conflicts by auto-rescheduling if a policyholder or adjuster cancels, without you lifting a finger. AI could act like a personal scheduler that: • Syncs with the adjuster’s calendar (Outlook, Google, CQ system, etc.) and only offers insureds available time slots. • Suggests optimal routing by mapping appointments to minimize drive time between properties. • Sends confirmations & reminders automatically to homeowners and contractors, reducing no-shows. Think “Uber for inspections”—the AI knows where you’ll be, when you’re free, and books appointments accordingly. 2. AI-Powered Communication • Automated texts or emails: Insureds get friendly reminders like, “Hi, this is your adjuster. I’ll be at your property tomorrow at 9 a.m. Reply CONFIRM to lock it in.” • Multi-language support: AI chatbots can communicate with insureds in their preferred language to coordinate details. • Status updates: AI could proactively update the insured if you’re running late, similar to delivery apps. Automated Reminders & Follow-Ups • AI can text or email insureds before the appointment (“Your field inspection with Jane Smith is scheduled for Tuesday at 10:30 a.m. Please reply Y/N to confirm.”). • Reduces no-shows by sending reminders 24 hours and 1 hour before the visit. 3. Route Optimization & Logistics • AI-driven mapping: Automatically plans the day’s route for least windshield time. • Weather alerts: Notifies if conditions might delay access (flooded road, storm, etc.). • Contractor coordination: Schedules inspections to align with mitigation vendors so everyone’s on-site together. Route Optimization + Scheduling • AI can link with mapping apps to recommend appointment times based on travel routes. Example: “You’re in Daphne, AL at 9:00 a.m., next claim is in Fairhope—AI can book a 10:00 a.m. inspection and even buffer in 15 minutes for traffic.” 4. Dynamic Communication Tools • Policyholders can interact with a chatbot to propose times that work for them, instead of waiting on calls. • AI can even translate reminders into multiple languages (helpful in diverse communities). 5. Claim File Integration • The AI links directly to the claim system (like Davies CQ or XactAnalysis). Once an inspection is set, it updates the claim file with date/time, contact details, and travel notes—no double entry. • Smart triage: It can even flag urgent losses (e.g., water losses needing immediate mitigation) and prioritize those on the calendar. Data Collection on the Fly • During scheduling, AI can gather intake info: accessibility issues, pets, parking, keyholder availability. • Builds a quick “pre-inspection brief” so the adjuster knows what to expect before showing up. Integration with Claims Systems • AI can pull claim data from systems like XactAnalysis, CoreLogic, or Davies CQ, and automatically generate inspection schedules based on severity, deadlines, or SLA requirements. 6. Voice Assistants for Field Adjusters • Hands-free tools: while driving between claims, adjusters can ask, “What’s my next appointment?” or “Reschedule Mrs. Johnson for Thursday afternoon.” • AI logs it, sends out notices, and updates the calendar—no more sticky notes on the dashboard. ________________________________________ Sample AI Workflow for Adjuster Appointment Coordination Claim Intake → AI Trigger • Claim is assigned in the carrier/Davies CQ/CoreLogic system. • AI immediately pulls insured’s contact details, loss location, and claim type. 2. AI Outreach to Policyholder • Sends a friendly text/email/voice message offering appointment slots: “Hello [Name], this is [Adjuster Name] with [Carrier]. I’ll be inspecting your property for claim #[Claim #]. I have openings Tuesday at 10:00 a.m. or Wednesday at 2:00 p.m. Which works best for you?” • Policyholder replies with choice or requests alternatives. • AI updates adjuster’s calendar without manual back-and-forth. 3. Calendar + Route Optimization • AI checks the adjuster’s schedule and travel times. • If an appointment is far out of the way, AI suggests grouping inspections by location. Example: “You have 3 claims in Fairhope—schedule them back-to-back to save 90 minutes drive time.” 4. Confirmation & Reminders • Once booked, AI sends an appointment confirmation: “Your inspection is confirmed for Wednesday, Sept 27 at 2:00 p.m. with [Adjuster Name]. Please ensure someone 18+ is present. Reply C to confirm or R to reschedule.” • Sends reminders: o 24 hours before o 1 hour before 5. Reschedule/Cancellation Handling • If policyholder cancels, AI offers next best available slots. • Adjuster gets a simple push notification: “Mrs. Johnson rescheduled to Friday at 11:00 a.m.—calendar updated.” ________________________________________ Sample Communication Scripts AI Could Send Initial Contact (Text/Email) “Hi [Name], I’m [Adjuster Name], your field adjuster for claim #[Claim #]. I’d like to schedule an inspection. Available times: • Tuesday, 10:00 a.m. • Wednesday, 2:00 p.m. Reply with your choice or let me know another time that works.” ________________________________________ Confirmation “Thanks! Your property inspection is confirmed for [Date/Time]. If you need to reschedule, reply R. Please have access available to all damaged areas.” ________________________________________ Reminder (24 Hours Before) “Reminder: Your inspection with [Adjuster Name] is scheduled for tomorrow at [Time]. Reply R if you need to reschedule.” ________________________________________ Day-of Reminder (1 Hour Before) “We’re on our way! Your inspection with [Adjuster Name] is at [Time]. Please ensure someone is home to allow access.” ________________________________________ Reschedule Response “No problem! Please select a new time: • Friday, 11:00 a.m. • Monday, 9:30 a.m. • Monday, 1:30 p.m.” ________________________________________ What the Dashboard Might Show • Map View: Claim addresses pinned, with optimized driving routes. • Calendar View: Color-coded by confirmed, pending, or canceled appointments. • Alerts: “2 claims unconfirmed for tomorrow” or “Policyholder rescheduled—calendar updated.” • Auto-Notes: Appointment status recorded directly into the claim file (no manual typing). What the Adjuster Does (Step by Step) 1. Open the Dashboard/App o On a laptop before heading out, or on a mobile device in the field. o The adjuster sees their schedule, claim details, routes, and alerts in one view. 2. Appointments Auto-Populate o AI pulls assigned claims from the carrier system (CQ, CoreLogic, XactAnalysis, etc.). o Claim #, Policy #, Carrier, Insured details are pre-loaded—no manual entry. 3. Pick or Approve Time Slots o AI suggests optimal times/routes. o Adjuster can accept, tweak, or drag/drop appointments on the calendar. 4. Communications Without the Back-and-Forth o Instead of calling/texting each policyholder, the adjuster just selects a Quick-Send template (e.g., confirmation, reminder, reschedule). o AI auto-fills the message with claim-specific data: name, date, time, address, carrier. o The adjuster hits Send SMS or Send Email. 5. On the Road (Mobile Mode) o The app shows today’s route in optimized order. o Adjuster can tap Open in Maps for directions. o If offline, they still see all synced appointments and notes (calls/emails greyed out). 6. Log Notes with One Tap o During or after a call/visit, the adjuster taps + Add Note in the communication log. o Notes sync automatically back to the carrier file when online. 7. Track Claim Stage o Each appointment card has a Next Steps tracker (inspection scheduled, inspection completed, estimate written, carrier approval pending). o Adjuster updates the stage with one click—no digging through systems. ________________________________________ How Sync with Davies CQ Works 1. Integration Layer • The app doesn’t talk directly to CQ’s database (that’s locked down for good reason). • Instead, a middleware/API layer sits in between: o Pulls claim assignments, insured contact info, policy #, and carrier metadata from CQ. o Pushes back updates (appointment status, communication logs, inspection stage). Think of it as a translator between the AI scheduling app and CQ’s claim record system. ________________________________________ 2. Data Flow Example • Inbound (CQ → App): o New claims assigned to adjuster populate automatically on the dashboard. o Includes claim #, policy #, loss location, insured contact details, and due dates. • Outbound (App → CQ): o Appointment confirmed → CQ shows “Inspection scheduled 9/27 at 2 PM.” o Communication log note added → syncs into CQ claim file as adjuster activity. o Stage update (e.g., “Inspection complete”) → CQ claim status changes. ________________________________________ 3. Sync Mechanics • Scheduled Syncs: e.g., every 15 minutes the app checks CQ for updates. • Real-time Webhooks: when an adjuster takes action in the app, it pushes immediately to CQ (preferred, if Davies IT exposes this). • Offline Mode: adjuster can still view and add notes offline; app queues changes and pushes them to CQ once connected. ________________________________________ 4. Security & Compliance • All API calls use secure tokens (OAuth or SAML) tied to the adjuster’s CQ login. • Audit trail: every action the app pushes back (note, SMS, email, stage update) is timestamped and tied to the adjuster’s user ID—so it matches CQ’s compliance requirements. ________________________________________ . AI’s Role • AI doesn’t replace CQ—it enhances it: o Drafts messages (SMS/email) and pre-fills appointment slots. o Routes info into CQ automatically so adjusters don’t double-enter. o Surfaces reminders, photo requests, and policyholder engagement data inside CQ’s existing workflows. ________________________________________ 🚀 Example Workflow with CQ Sync 1. CQ assigns 5 new claims → App shows them instantly on adjuster’s dashboard. 2. AI sends confirmation texts to insureds → Responses logged back into CQ. 3. Adjuster completes inspection → Updates stage in app → CQ status changes to “Inspection Complete.” 4. Manager in CQ sees full communication log + AI reminders as if the adjuster keyed them in manually. ________________________________________ 👉 In short: The AI app acts as a front-end field productivity tool, while CQ remains the system of record. Adjusters work faster in the app, but managers and carriers still see everything inside CQ. Davies CQ × AI Scheduler – Technical Notes (1■Pager) Scope: how the AI Appointment Coordinator syncs with Davies CQ safely and reliably. Overview The AI Scheduler acts as a productivity layer for field adjusters while Davies CQ remains the system of record. Integration is via a secure middleware/API that reads assignments from CQ and writes back appointments, communications, and stage updates. Data In Scope • CQ  App: claim#, policy#, insured name/phone/email, loss address/coords, peril, SLAs, adjuster assignment. • App  CQ: appointment status/time, communication events (SMS/email), notes, stage changes (inspection  estimate  approval). Suggested API Endpoints (Middleware) Method Endpoint Purpose GET /claims/assignments?adjusterId={id}&since={ts} Pull newly assigned/updated claims GET /claims/{claimId}/appointments List appointments for a claim POST /claims/{claimId}/appointments Create/update (idempotent) appointment POST /claims/{claimId}/communications Log SMS/Email outreach (w/ messageId) PATCH /claims/{claimId}/stage Update claim stage (e.g., 'Inspection Completed') POST /events/webhook Receive CQ events (optional, for near■real■time sync) Sample Payload – Appointment Confirmation (idempotent) POST /claims/CLM-2025-001184/appointments { "idempotencyKey": "a7e1b6c0-5f4a-4d0a-8a7c-2f0d99", "start": "2025-09-27T14:00:00-05:00", "end": "2025-09-27T15:00:00-05:00", "status": "confirmed", "location": {"address": "11504 Redfern Rd, Daphne, AL", "lat": 30.603, "lng": -87.906}, "channel": "sms", "messageId": "sms_01HABCD", "notes": "Insured confirmed by text; 24hr/1hr reminders scheduled" } Auth & Security • SSO via SAML/OIDC for users; OAuth2 (client credentials) for service■to■service. • Scopes by role (adjuster, manager, scheduler). Tokens TTL 60 min; refresh tokens rotated. • TLS 1.2+; IP allowlist for middleware; secrets in vault (no hard■coding). • PII encryption at rest; least■privileged access to CQ endpoints. Sync & Eventing • Delta sync every 15 min (poll), optional CQ  webhook for near real■time. • Nightly reconciliation job (full compare) to catch drifts. • Idempotency keys on writes; optimistic concurrency via ETag/version. • Backoff/retry policy: 3, 15, 60, 180 seconds; poison queue after N failures with alert. Offline & Conflict Handling • Local queue persists actions while offline; replays on reconnect in FIFO order. • Conflict resolution: newest write wins OR version check with user prompt (configurable). • Actions stamped with adjusterId, deviceId, timestamp, geo (if available) for audit. Logging, Metrics & Audits • Append■only audit log: timestamp, userId, claim#, action, channel, payload hash, result. • Metrics: confirm rate, no■show rate, avg time■to■confirm, drive time saved, SMS deliverability. • Dashboards & alerts for error rates, webhook failures, queue depth, latency. Compliance & Messaging • SMS consent/opt■out: honor STOP/START/HELP automatically; store consent per claim/policyholder. • Retention: comms/audits retained per carrier policy (e.g., 7 years). • Templates reviewed for disclaimers (NFIP limitations; carrier■specific wording). Rollout Checklist • Pilot with 5–10 adjusters; enable read■only first, then writes. • Provision test claims & sandbox SMS/email routes; verify opt■out flow. • Import branded templates; confirm maps key & allowed regions. • Train field team (15■min micro■lesson) + create fallback SOP if service unavailable. import { Card, CardContent } from "@/components/ui/card"; import { Button } from "@/components/ui/button"; import { Calendar, Phone, Mail, MessageSquareText, CheckSquare, Building2, Hash, WifiOff } from "lucide-react"; import { MapPin, Clock, CheckCircle, XCircle, AlertCircle, RefreshCcw, FileText } from "lucide-react"; import { motion } from "framer-motion"; export default function AdjusterSchedulerDashboard() { const isOffline = true; // Simulated offline flag for mockup return ( <div className="p-4 bg-gray-50 min-h-screen"> {/* Header with Davies Branding */} <div className="flex flex-col md:flex-row items-center justify-between mb-6 gap-3"> <div className="flex items-center gap-3"> <img src="/davies-logo.png" alt="Davies Logo" className="h-10 w-auto" /> <h1 className="text-xl md:text-2xl font-bold text-blue-800 text-center md:text-left"> $1 {/* Sync Status Row */} <div className="flex flex-col md:flex-row items-start md:items-center justify-between mb-4 gap-2"> <div className="flex items-center gap-2 text-sm text-gray-600"> <span className="inline-block h-2 w-2 rounded-full bg-yellow-500 animate-pulse" /> <span>Offline • Last synced <strong>10:42 AM</strong></span> </div> <div className="flex items-center gap-2"> <Button size="sm" variant="outline">View Sync Log</Button> <Button size="sm" disabled>Sync Now</Button> </div> </div> {/* Offline Banner */} {isOffline && ( <div className="mb-4 p-3 flex items-center gap-2 rounded-xl bg-yellow-100 border border-yellow-300 text-yellow-800 text-sm"> <WifiOff className="w-5 h-5" /> Offline mode active – showing last synced appointments. Changes will update once back online. </div> )} {/* Layout adjusts for mobile */} <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> {/* Calendar & Appointments */} <Card className="lg:col-span-2 shadow-xl rounded-2xl"> <CardContent className="p-4 md:p-6"> <h2 className="text-lg md:text-xl font-bold flex items-center gap-2 mb-4"> <Calendar className="w-5 h-5 text-blue-600" /> Appointment Calendar </h2> {/* Filters */} <div className="flex flex-wrap gap-2 mb-4"> <Button variant="outline" size="sm">Today</Button> <Button variant="outline" size="sm">This Week</Button> <Button variant="outline" size="sm">Unconfirmed</Button> <Button variant="outline" size="sm">Needs Reschedule</Button> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> {[ { name: "John Smith", date: "Wed, Sept 27", time: "2:00 PM", location: "11504 Redfern Rd, Daphne, AL", status: "confirmed", phone: "(555) 123-4567", email: "john.smith@email.com", notes: [ "9/20 – Left voicemail", "9/22 – Confirmed appointment by text", ], stage: "Inspection Scheduled", claimNumber: "CLM-2025-001184", policyNumber: "POL-AL-7789123", carrier: "Davies TPA / Liberty Mutual", }, { name: "Mary Johnson", date: "Thurs, Sept 28", time: "10:00 AM", location: "890 Pine St, Fairhope, AL", status: "pending", phone: "(555) 987-6543", email: "mary.j@email.com", notes: [ "9/21 – Spoke with policyholder, requested later time", ], stage: "Pending Confirmation", claimNumber: "CLM-2025-001229", policyNumber: "POL-AL-6645109", carrier: "Allianz Property", }, ].map((appt, i) => ( <motion.div key={i} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: i * 0.1 }} className="p-3 md:p-4 rounded-xl border bg-white shadow-sm flex flex-col gap-3" > <div className="flex justify-between items-center"> <h3 className="font-semibold text-base md:text-lg">{appt.name}</h3> {appt.status === "confirmed" && ( <CheckCircle className="w-5 h-5 text-green-600" /> )} {appt.status === "pending" && ( <AlertCircle className="w-5 h-5 text-yellow-500" /> )} </div> {/* Claim / Carrier details */} <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-xs md:text-sm bg-gray-50 p-2 rounded-xl"> <div className="flex items-center gap-1 md:gap-2 text-gray-700"> <Hash className="w-4 h-4" /> Claim: {appt.claimNumber} </div> <div className="flex items-center gap-1 md:gap-2 text-gray-700"> <Hash className="w-4 h-4" /> Policy: {appt.policyNumber} </div> <div className="flex items-center gap-1 md:gap-2 text-gray-700"> <Building2 className="w-4 h-4" /> {appt.carrier} </div> </div> <p className="flex items-center gap-2 text-gray-600 text-sm"> <Clock className="w-4 h-4" /> {appt.date} – {appt.time} </p> <p className="flex items-center gap-2 text-gray-600 text-sm"> <MapPin className="w-4 h-4" /> {appt.location} </p> {/* Contact Options */} <div className="flex gap-2 mt-2 flex-wrap"> <Button variant="outline" size="sm" disabled={isOffline} className="flex items-center gap-1"> <Phone className="w-4 h-4" /> Call </Button> <Button variant="outline" size="sm" disabled={isOffline} className="flex items-center gap-1"> <Mail className="w-4 h-4" /> Email </Button> <Button variant="outline" size="sm" disabled={isOffline} className="flex items-center gap-1"> <MessageSquareText className="w-4 h-4" /> Message </Button> </div> {/* Actions */} <div className="flex gap-2 mt-3 flex-wrap"> <Button className="flex-1" size="sm">Open Claim</Button> <Button variant="secondary" size="sm" disabled={isOffline} className="flex items-center gap-1"> <RefreshCcw className="w-4 h-4" /> Reschedule </Button> </div> {/* Communication Log */} <div className="mt-3 p-2 border-t border-gray-200"> <h4 className="text-sm font-semibold flex items-center gap-1 mb-2"> <FileText className="w-4 h-4 text-blue-600" /> Communication Log </h4> <ul className="text-xs md:text-sm text-gray-600 space-y-1"> {appt.notes.map((note, j) => ( <li key={j}>• {note}</li> ))} </ul> <Button variant="ghost" size="sm" disabled={isOffline} className="mt-1 text-blue-600"> + Add Note </Button> </div> {/* Next Steps Tracker */} <div className="mt-3 p-2 border-t border-gray-200"> <h4 className="text-sm font-semibold flex items-center gap-1 mb-2"> <CheckSquare className="w-4 h-4 text-green-600" /> Next Steps </h4> <p className="text-xs md:text-sm text-gray-700">{appt.stage}</p> <div className="flex gap-2 mt-2 flex-wrap"> <Button variant="outline" size="sm" disabled={isOffline}>Update</Button> <Button variant="outline" size="sm" disabled={isOffline}>Mark Complete</Button> </div> </div> </motion.div> ))} </div> </CardContent> </Card> {/* Route Optimization & Alerts */} <div className="grid grid-rows-2 gap-6"> <Card className="shadow-xl rounded-2xl"> <CardContent className="p-4 md:p-6"> <h2 className="text-lg md:text-xl font-bold mb-4">Optimized Route</h2> <p className="text-gray-600 mb-2 text-sm md:text-base"> Suggested order for tomorrow’s inspections: </p> <ol className="list-decimal list-inside space-y-1 text-gray-700 text-sm md:text-base"> <li>Daphne → Fairhope → Mobile</li> <li>Drive Time: 1h 45m</li> <li>Time Saved: 35 minutes</li> </ol> <Button className="mt-3 w-full md:w-auto" size="sm" disabled={isOffline}>Open in Maps</Button> </CardContent> </Card> <Card className="shadow-xl rounded-2xl"> <CardContent className="p-4 md:p-6"> <h2 className="text-lg md:text-xl font-bold mb-4">Alerts</h2> <ul className="space-y-2 text-sm md:text-base"> <li className="flex items-center gap-2 text-yellow-600"> <AlertCircle className="w-5 h-5" /> 2 not yet confirmed </li> <li className="flex items-center gap-2 text-green-600"> <CheckCircle className="w-5 h-5" /> 3 confirmed this week </li> <li className="flex items-center gap-2 text-red-600"> <XCircle className="w-5 h-5" /> 1 cancellation </li> </ul> <Button variant="outline" size="sm" className="mt-3 w-full md:w-auto" disabled={isOffline}>View All</Button> </CardContent> </Card> {/* Quick-Send Templates */} <Card className="shadow-xl rounded-2xl"> <CardContent className="p-4 md:p-6"> <h2 className="text-lg md:text-xl font-bold mb-3">Quick-Send Templates</h2> {/* Template picker */} <div className="flex flex-col gap-3"> <select className="border rounded-lg p-2 text-sm"> <option>— Select a template —</option> <option>Initial outreach (SMS)</option> <option>Confirmation (SMS)</option> <option>24-hour reminder (SMS)</option> <option>1-hour ETA (SMS)</option> <option>Reschedule offer (SMS)</option> <option>Email: Inspection confirmation</option> </select> {/* Preview with merge fields */} <div className="bg-gray-50 rounded-xl p-3 text-sm text-gray-700"> <p className="font-semibold mb-1">Preview</p> <p> Hi {{POLICYHOLDER_NAME}}, this is {{ADJUSTER_NAME}} with {{CARRIER}} regarding claim {{CLAIM_NUMBER}}. I can meet {{DATE}} at {{TIME}} at {{ADDRESS}}. Reply C to confirm or R to reschedule. </p> </div> {/* Merge field chips (visual only) */} <div className="flex flex-wrap gap-2 text-xs"> <span className="px-2 py-1 rounded-full bg-blue-100 text-blue-700">{{POLICYHOLDER_NAME}}</span> <span className="px-2 py-1 rounded-full bg-blue-100 text-blue-700">{{ADJUSTER_NAME}}</span> <span className="px-2 py-1 rounded-full bg-blue-100 text-blue-700">{{CARRIER}}</span> <span className="px-2 py-1 rounded-full bg-blue-100 text-blue-700">{{CLAIM_NUMBER}}</span> <span className="px-2 py-1 rounded-full bg-blue-100 text-blue-700">{{DATE}}</span> <span className="px-2 py-1 rounded-full bg-blue-100 text-blue-700">{{TIME}}</span> <span className="px-2 py-1 rounded-full bg-blue-100 text-blue-700">{{ADDRESS}}</span> </div> {/* Send buttons */} <div className="flex gap-2 mt-2 flex-wrap"> <Button size="sm" disabled>Send SMS</Button> <Button variant="outline" size="sm" disabled>Send Email</Button> <Button variant="ghost" size="sm">Copy to Clipboard</Button> </div> </div> {/* Canned script library (read-only list) */} <div className="mt-4"> <p className="text-sm font-semibold mb-2">Script Library</p> <ul className="text-sm text-gray-700 list-disc list-inside space-y-1"> <li><strong>Initial outreach:</strong> “Hi {{POLICYHOLDER_NAME}}, this is {{ADJUSTER_NAME}} with {{CARRIER}}…”</li> <li><strong>Confirmation:</strong> “Your inspection is confirmed for {{DATE}} at {{TIME}}…”</li> <li><strong>24-hr reminder:</strong> “Reminder: We’re scheduled for {{DATE}} at {{TIME}}…”</li> <li><strong>1-hr ETA:</strong> “I’m en route. ETA {{TIME}}. Please ensure access to all damaged areas.”</li> <li><strong>Reschedule:</strong> “No problem. Next available: {{OPTION_1}}, {{OPTION_2}}…”</li> {/* Carrier-Specific Variants */} <li><strong>NFIP (WYO) confirmation:</strong> “Your flood inspection is confirmed for {{DATE}} at {{TIME}}. Please have your SFIP policy, photo ID, and any mitigation receipts available. We only evaluate <em>direct physical loss by or from flood</em>; we’ll document all accessible areas.”</li> <li><strong>Liberty Mutual confirmation:</strong> “Appointment set for {{DATE}} at {{TIME}}. For faster processing, upload photos of the affected rooms and any temporary repairs via the secure link we’ll send after this message.”</li> <li><strong>Allianz reminder:</strong> “Reminder for {{DATE}} at {{TIME}}. If access changes, reply R. Have contractor estimates handy if available; it can reduce follow-ups.”</li> {/* Pre-Inspection Photo Nudge */} <li><strong>Photo-collection nudge (SMS):</strong> “To speed things up, please text or upload 6–10 photos: 2 wide shots per affected room, 2–3 close-ups of damage, and any temporary repairs/receipts. Include one exterior photo of the address side.”</li> <li><strong>Photo-collection link (Email):</strong> “Please use this secure upload link to share photos/videos before {{DATE}}: {{UPLOAD_LINK}}. Tips: wide shots, close-ups, serial/model tags for damaged appliances, and any mitigation invoices.”</li> </ul> {/* Carrier Presets (visual toggles) */} <div className="mt-4"> <p className="text-sm font-semibold mb-2">Carrier Presets</p> <div className="flex flex-wrap gap-2"> <Button size="sm" variant="outline">NFIP / WYO</Button> <Button size="sm" variant="outline">Generic Property</Button> </div> </div> </div> </CardContent> </Card> </div> </div> </div> ); }